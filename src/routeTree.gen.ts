/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as standaloneLayoutImport } from './pages/(standalone)/_layout'
import { Route as authLoginImport } from './pages/(auth)/login'
import { Route as standaloneLayoutUserProfileImport } from './pages/(standalone)/_layout.user/profile'

// Create Virtual Routes

const standaloneImport = createFileRoute('/(standalone)')()

// Create/Update Routes

const standaloneRoute = standaloneImport.update({
  id: '/(standalone)',
  getParentRoute: () => rootRoute,
} as any)

const standaloneLayoutRoute = standaloneLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => standaloneRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const standaloneLayoutUserProfileRoute =
  standaloneLayoutUserProfileImport.update({
    id: '/user/profile',
    path: '/user/profile',
    getParentRoute: () => standaloneLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(standalone)': {
      id: '/(standalone)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof standaloneImport
      parentRoute: typeof rootRoute
    }
    '/(standalone)/_layout': {
      id: '/(standalone)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof standaloneLayoutImport
      parentRoute: typeof standaloneRoute
    }
    '/(standalone)/_layout/user/profile': {
      id: '/(standalone)/_layout/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof standaloneLayoutUserProfileImport
      parentRoute: typeof standaloneLayoutImport
    }
  }
}

// Create and export the route tree

interface standaloneLayoutRouteChildren {
  standaloneLayoutUserProfileRoute: typeof standaloneLayoutUserProfileRoute
}

const standaloneLayoutRouteChildren: standaloneLayoutRouteChildren = {
  standaloneLayoutUserProfileRoute: standaloneLayoutUserProfileRoute,
}

const standaloneLayoutRouteWithChildren =
  standaloneLayoutRoute._addFileChildren(standaloneLayoutRouteChildren)

interface standaloneRouteChildren {
  standaloneLayoutRoute: typeof standaloneLayoutRouteWithChildren
}

const standaloneRouteChildren: standaloneRouteChildren = {
  standaloneLayoutRoute: standaloneLayoutRouteWithChildren,
}

const standaloneRouteWithChildren = standaloneRoute._addFileChildren(
  standaloneRouteChildren,
)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRoute
  '/': typeof standaloneLayoutRouteWithChildren
  '/user/profile': typeof standaloneLayoutUserProfileRoute
}

export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/': typeof standaloneLayoutRouteWithChildren
  '/user/profile': typeof standaloneLayoutUserProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)/login': typeof authLoginRoute
  '/(standalone)': typeof standaloneRouteWithChildren
  '/(standalone)/_layout': typeof standaloneLayoutRouteWithChildren
  '/(standalone)/_layout/user/profile': typeof standaloneLayoutUserProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/user/profile'
  id:
    | '__root__'
    | '/(auth)/login'
    | '/(standalone)'
    | '/(standalone)/_layout'
    | '/(standalone)/_layout/user/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authLoginRoute: typeof authLoginRoute
  standaloneRoute: typeof standaloneRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authLoginRoute: authLoginRoute,
  standaloneRoute: standaloneRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)/login",
        "/(standalone)"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(standalone)": {
      "filePath": "(standalone)",
      "children": [
        "/(standalone)/_layout"
      ]
    },
    "/(standalone)/_layout": {
      "filePath": "(standalone)/_layout.tsx",
      "parent": "/(standalone)",
      "children": [
        "/(standalone)/_layout/user/profile"
      ]
    },
    "/(standalone)/_layout/user/profile": {
      "filePath": "(standalone)/_layout.user/profile.tsx",
      "parent": "/(standalone)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
